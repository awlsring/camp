package pages

import (
	"fmt"
	"github.com/awlsring/camp/internal/app/campd/core/domain/system"
	"github.com/awlsring/camp/internal/pkg/values"
)

templ Summary(system *system.System) {
	@Base("Summary") {
		<body class="bg-gray-100 p-8">
			<div class="max-w-2xl mx-auto bg-white p-8 rounded shadow-md">
				<h1 class="text-2xl font-bold mb-4">System Information</h1>
				if system.Host != nil {
					<div class="mb-6">
						<h2 class="text-xl font-semibold mb-2">Host</h2>
						if system.Host.Hostname != nil {
							<p>Hostname: { *system.Host.Hostname }</p>
						}
						if system.Host.HostId != nil {
							<p>HostId: { *system.Host.HostId }</p>
						}
						if system.Host.OS != nil {
							<h3 class="text-xl font-semibold mb-2">OS</h3>
							if system.Host.OS.Name != nil {
								<p>Name: { *system.Host.OS.Name }</p>
							}
							if system.Host.OS.Version != nil {
								<p>Version: { *system.Host.OS.Version }</p>
							}
							if system.Host.OS.Family != nil {
								<p>Family: { *system.Host.OS.Family }</p>
							}
							if system.Host.OS.Platform != nil {
								<p>Platform: { *system.Host.OS.Platform }</p>
							}
							if system.Host.OS.Kernel != nil {
								<p>Kernel Version: { *system.Host.OS.Kernel }</p>
							}
						}
					</div>
				}
				if system.Bios != nil {
					<div class="mb-6">
						<h2 class="text-xl font-semibold mb-2">BIOS</h2>
						if system.Bios.Vendor != nil {
							<p>Vendor: { *system.Bios.Vendor }</p>
						}
						if system.Bios.Version != nil {
							<p>Version: { *system.Bios.Version }</p>
						}
						if system.Bios.Date != nil {
							<p>Release Date: { *system.Bios.Date }</p>
						}
					</div>
				}
				if system.Motherboard != nil {
					<div class="mb-6">
						<h2 class="text-xl font-semibold mb-2">Motherboard</h2>
						if system.Motherboard.AssetTag != nil {
							<p>Asset Tag: { *system.Motherboard.AssetTag }</p>
						}
						if system.Motherboard.Product != nil {
							<p>Platform: { *system.Motherboard.Product }</p>
						}
						if system.Motherboard.Serial != nil {
							<p>Serial Number: { *system.Motherboard.Serial }</p>
						}
						if system.Motherboard.Version != nil {
							<p>Version: { *system.Motherboard.Version }</p>
						}
						if system.Motherboard.Vendor != nil {
							<p>Vendor: { *system.Motherboard.Vendor }</p>
						}
					</div>
				}
				if system.Cpu != nil {
					<div class="mb-6">
						<h2 class="text-xl font-semibold mb-2">CPU</h2>
						<p>Total Cores: { fmt.Sprintf("%d", system.Cpu.TotalCores) }</p>
						<p>Total Threads: { fmt.Sprintf("%d", system.Cpu.TotalThreads) }</p>
						<p>Architecture: { system.Cpu.Architecture.String() }</p>
						if system.Cpu.Vendor != nil {
							<p>Vendor: { *system.Cpu.Vendor }</p>
						}
						if system.Cpu.Model != nil {
							<p>Model: { *system.Cpu.Model }</p>
						}
						if len(system.Cpu.Processors) > 0 {
							<h3 class="text-xl font-semibold mb-2">Processors</h3>
							for _, processor := range system.Cpu.Processors {
								<div class="border-t border-gray-500 mt-2 pt-2">
									<h4>Processor { fmt.Sprintf("%d", processor.Id) }</h4>
									<p>Cores { fmt.Sprintf("%d", processor.CoreCount) }</p>
									<p>Threads { fmt.Sprintf("%d", processor.ThreadCount) }</p>
									if len(processor.Cores) > 0 {
										<h5 class="text-xl font-semibold mb-2">Cores</h5>
										for _, core := range processor.Cores {
											<div class="border-t border-gray-500 mt-2 pt-2">
												<h6>Core { fmt.Sprintf("%d", core.Id) }</h6>
												<p>Threads { fmt.Sprintf("%d", core.Threads) }</p>
											</div>
										}
									}
								</div>
							}
						}
					</div>
				}
				if system.Memory != nil {
					<div class="mb-6">
						<h2 class="text-xl font-semibold mb-2">Memory Information</h2>
						<p>Total: { values.BytesToHumanReadable(system.Memory.Total) }</p>
					</div>
				}
				if len(system.Disks) > 0 {
					<div class="mb-6">
						<h2 class="text-xl font-semibold mb-2">Disks</h2>
						for _, disk := range system.Disks {
							<div class="border-t border-gray-500 mt-2 pt-2">
								<p>Name: { disk.Name }</p>
								<p>Size: { values.BytesToHumanReadable(disk.Size) }</p>
								<p>Type: { disk.DriveType.String() }</p>
								<p>Controller: { disk.StorageController.String() }</p>
								<p>Removable: { fmt.Sprintf("%t", disk.Removable) }</p>
								if disk.Vendor != nil {
									<p>Vendor: { *disk.Vendor }</p>
								}
								if disk.Model != nil {
									<p>Model: { *disk.Model }</p>
								}
								if disk.Serial != nil {
									<p>Serial: { *disk.Serial }</p>
								}
								if disk.WWN != nil {
									<p class="w-full overflow-ellipsis overflow-clip">WWN: { *disk.WWN }</p>
								}
								if len(disk.Partitions) > 0 {
									<h3 class="text-xl font-semibold mb-2">Partitions</h3>
									for _, partition := range disk.Partitions {
										<h4>Partition { partition.Name }</h4>
										<p>Size: { values.BytesToHumanReadable(partition.Size) }</p>
										<p>Readonly: { fmt.Sprintf("%t", partition.Readonly) }</p>
										if partition.FileSystem != nil {
											<p>File System: { *partition.FileSystem }</p>
										}
										if partition.Label != nil {
											<p>Label: { *partition.Label }</p>
										}
										if partition.Type != nil {
											<p>Type: { *partition.Type }</p>
										}
										if partition.UUID != nil {
											<p>UUID: { *partition.UUID }</p>
										}
										if partition.MountPoint != nil {
											<p>Mount Point: { *partition.MountPoint }</p>
										}
									}
								}
							</div>
						}
					</div>
				}
				if len(system.NetworkInterfaces) > 0 {
					<div class="mb-6">
						<h2 class="text-xl font-semibold mb-2">Network Interfaces</h2>
						for _, networkInterface := range system.NetworkInterfaces {
							<div class="border-t border-gray-500 mt-2 pt-2">
								<p class="text-md font-semibold mb-2">{ networkInterface.Name }</p>
								<p>Virtual: { fmt.Sprintf("%t", networkInterface.Virtual) }</p>
								if networkInterface.MacAddress != nil {
									<p>MAC Address: { networkInterface.MacAddress.String() }</p>
								}
								if networkInterface.Speed != nil {
									<p>Speed: { *networkInterface.Speed }</p>
								}
								if networkInterface.Duplex != nil {
									<p>Duplex: { *networkInterface.Duplex }</p>
								}
								if networkInterface.Vendor != nil {
									<p>Vendor: { *networkInterface.Vendor }</p>
								}
								if networkInterface.PCIAddress != nil {
									<p>PCI Address: { *networkInterface.PCIAddress }</p>
								}
								if len(networkInterface.IpAddresses) > 0 {
									<div class="mt-2">
										<p class="text-md font-medium mb-2">IP Addresses</p>
										for _, ipAddress := range networkInterface.IpAddresses {
											<li class="ml-3">{ ipAddress.Address.String() } ({ ipAddress.Version.String() })</li>
										}
									</div>
								}
							</div>
						}
					</div>
				}
			</div>
		</body>
	}
}
